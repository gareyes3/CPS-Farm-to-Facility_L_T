foldi <- Boston[take, ]
foldOther <- Boston[!take, ]
f <- loess(dis ~ nox, data=foldOther, span=span[j])
pred <- predict(f, foldi)
mse[i] <- mean((pred - foldi$dis)^2, na.rm = TRUE)
}
cv[j]<- mean(mse)
}
plot(span, cv)
k <- 10
fold <- sample(k, nrow(Boston), replace = TRUE)
## For each span from 1 to 10 we can calculate the CV test error:
mse <- numeric(k)
span <- seq(1, 10, by = 1)
cv <- numeric(length(span))
for (j in seq_along(span))
{
for (i in seq_len(k))
{
take <- fold == i
foldi <- Boston[take, ]
foldOther <- Boston[!take, ]
f <- lm(nox ~ poly(dis,j))
pred <- predict(f, foldi)
mse[i] <- mean((pred - foldi$dis)^2, na.rm = TRUE)
}
cv[j]<- mean(mse)
}
plot(span, cv)
library(splines)
fit <- lm(noxe ~ bs(dis, knots = c(4, 5, 6,7)))
fit <- lm(nox ~ bs(dis, knots = c(4, 5, 6,7)))
fit <- smooth.spline(nox, dis, df = 4)
plot(fit)
plot(fit)
plot(fit.4)
fit.6 <- smooth.spline(nox, dis, df = 6)
fit.7 <- smooth.spline(nox, dis, df = 7)
plot(nox, dis, col = "darkgrey")
plot(nox, dis, col = "darkgrey")
lines(fit.4, col = "red", lwd = 2)
lines(fit.5, col = "blue", lwd = 2)
lines(fit.6, col = "green", lwd = 2)
lines(fit.7, col = "black", lwd = 2)
fit.4 <- smooth.spline(nox, dis, df = 4)
fit.5 <- smooth.spline(nox, dis, df = 5)
fit.6 <- smooth.spline(nox, dis, df = 6)
fit.7 <- smooth.spline(nox, dis, df = 7)
plot(nox, dis, col = "darkgrey")
lines(fit.4, col = "red", lwd = 2)
lines(fit.5, col = "blue", lwd = 2)
lines(fit.6, col = "green", lwd = 2)
lines(fit.7, col = "black", lwd = 2)
plot(nox, dis, col = "darkgrey")
lines(fit.4, col = "red", lwd = 2)
lines(fit.5, col = "blue", lwd = 2)
lines(fit.6, col = "green", lwd = 2)
lines(fit.7, col = "black", lwd = 2)
legend("topright", legend = c("4 DF", "5 DF", "6 DF", "7 DF"),,
col = c("red", "blue","green","black"), lty = 1, lwd = 2, cex = .8)
fit.4 <- lm(nox ~ poly(dis, 4), data = Boston)
fit.5 <- lm(nox ~ poly(dis, 5), data = Boston)
fit.6 <- lm(nox ~ poly(dis, 6), data = Boston)
fit.7 <- lm(nox ~ poly(dis, 7), data = Boston)
plot(nox, dis, col = "darkgrey")
lines(fit.4, col = "red", lwd = 2)
lines(fit.5, col = "blue", lwd = 2)
lines(fit.6, col = "green", lwd = 2)
lines(fit.7, col = "black", lwd = 2)
legend("topright", legend = c("4 DF", "5 DF", "6 DF", "7 DF"),,
col = c("red", "blue","green","black"), lty = 1, lwd = 2, cex = .8)
library(ISLR2)
library(ISLR2)
set.seed(432010)
college_idx = sample(1:nrow(College), 600)
college_trn = College[college_idx,] # training data
college_tst = College[-college_idx,] # test data
library(ISLR2)
set.seed(432010)
college_idx = sample(1:nrow(College), 600)
college_trn = College[college_idx,] # training data
college_tst = College[-college_idx,] # test data
gam1 <- lm(Outstate ~ ns(Private, 4) + ns(PhD, 5) + Grad.Rate + Expend,
data = College)
gam1 <- lm(Outstate ~ ns(Private, 4) + ns(PhD, 5) + Grad.Rate + Expend,data = College)
gam1 <- lm(Outstate ~ ns(Private, 4) + ns(PhD, 4) + Grad.Rate + Expend,data = College)
gam1 <- lm(Outstate ~ ns(Private, 4) + PhD + Grad.Rate + Expend,data = College)
gam1 <- lm(Outstate ~ Private + PhD + Grad.Rate + Expend,data = College)
gam1 <- lm(Outstate ~ Private + PhD + Grad.Rate + s(Expend,4),data = College)
gam1 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,4),data = College)
?ns
?s
gam2 <- lm(Outstate ~ Private + PhD + Grad.Rate + s(Expend,4),data = College)
gam2 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,5),data = College)
gam3 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,6),data = College)
gam4 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,7),data = College)
gam1 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,4),data = college_trn)
gam2 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,5),data = college_trn)
gam3 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,6),data = college_trn)
gam4 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,7),data = college_trn)
preds <- predict(gam1, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam1, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam2, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam4, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam4, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
gam1 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,4),data = college_trn)
gam2 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,5),data = college_trn)
gam3 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,6),data = college_trn)
gam4 <- lm(Outstate ~ Private + PhD + Grad.Rate + ns(Expend,7),data = college_trn)
preds <- predict(gam1, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam2, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam4, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam4, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
?gam
gam1 <- gam(Outstate ~ s(Private, bs='ps', sp=0.6) + s(Private, bs='ps', sp=0.6) + Expend, data = college_trn)
library(gam)
gam1 <- gam(Outstate ~ s(Private, bs='ps', sp=0.6) + s(Private, bs='ps', sp=0.6) + Expend, data = college_trn)
gam1 <- gam(Outstate ~ s(Private, sp=0.6) + s(Private, sp=0.6) + Expend, data = college_trn)
View(college_trn)
gam1 <- gam(Outstate ~ Private + PhD + s(Expend, sp = 0.6), data = college_trn)
gam1 <- gam(Outstate ~ Private + PhD +Grad.Rate +  s(Expend, sp = 0.6) , data = college_trn)
summary(gam1)
plot(gam1)
gam1 <- gam(Outstate ~ Private + PhD +s(Grad.Rate, sp = 0.6) +  s(Expend, sp = 0.6) , data = college_trn)
summary(gam1)
plot(gam1)
gam1 <- gam(Outstate ~ Private + PhD +s(Grad.Rate, sp = 0.6) +  s(Expend, sp = 0.6) , data = college_trn)
summary(gam1)
plot(gam1)
gam2 <- gam(Outstate ~ Private + PhD +Grad.Rate +  s(Expend, sp = 0.6) , data = college_trn)
summary(gam1)
summary(gam2)
plot(gam2)
plot(gam1)
plot(gam2)
gam3 <- gam(Outstate ~ Private + PhD +Grad.Rate +  lo(Expend, sp = 0.6) , data = college_trn)
summary(gam3)
plot(gam24)
plot(gam3)
gam3 <- gam(Outstate ~ Private + PhD +Grad.Rate +  lo(Expend, span = 0.6) , data = college_trn)
summary(gam3)
plot(gam3)
gam4 <- gam(Outstate ~ Private + PhD +log(Grad.Rate,span = 0.6) +  lo(Expend, span = 0.6) , data = college_trn)
gam4 <- gam(Outstate ~ Private + PhD +lo(Grad.Rate,span = 0.6) +  lo(Expend, span = 0.6) , data = college_trn)
summary(gam4)
plot(gam4)
plot(gam3)
preds <- predict(gam1, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam2, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam4, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam4, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
gam1 <- gam(Outstate ~ Private + PhD +s(Grad.Rate, sp = 0.6) +  s(Expend, sp = 0.6) , data = college_trn)
summary(gam1)
plot(gam1)
gam2 <- gam(Outstate ~ Private + PhD +Grad.Rate +  s(Expend, sp = 0.6) , data = college_trn)
summary(gam2)
plot(gam2)
gam3 <- gam(Outstate ~ Private + PhD +Grad.Rate +  lo(Expend, span = 0.6) , data = college_trn)
summary(gam3)
plot(gam3)
gam4 <- gam(Outstate ~ Private + PhD +lo(Grad.Rate,span = 0.6) +  lo(Expend, span = 0.6) , data = college_trn)
summary(gam4)
plot(gam4)
preds <- predict(gam1, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam2, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam4, newdata = college_tst)
preds <- predict(gam3, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
preds <- predict(gam4, newdata = college_tst)
sqrt(mean((college_tst$Outstate - preds)^2))
library(faraway)
colnames(teengamb)
model_1<-lm(gamble~sex+status+income+verbal, data = teengamb)
summary (model_1)
model_1$coefficients
which.max(model_1$residuals)
which.max(model_1$residuals)
fitted(model_1)[24]
confint(model_1)
Average_status =mean(teengamb$status)
Average_income =mean(teengamb$income)
Average_verbal =mean(teengamb$verbal)
new_df <- data.frame(sex = 1,"status" = Average_status, "income" = Average_income, verbal =Average_verbal )
predict(model_1, new_df, interval = "prediction")
model_income<-lm(gamble~income, data = teengamb)
summary(model_income)
anova(model_1, model_income)
anova(model_income,model_1)
hipmod <- lm(hipcenter ~ Age+ Weight + Ht, data= seatpos)
summary(hipmod)
hipmod <- lm(hipcenter ~ Age+ Weight + Ht, data= seatpos)
summary(hipmod)
hipmod_shoes <- lm(hipcenter ~ Age+ Weight + Ht +HtShoes, data= seatpos)
summary(hipmod_shoes)
anova(hipmod_shoes,hipmod)
library(faraway)
colnames(teengamb)
model_1<-lm(gamble~sex+status+income+verbal, data = teengamb)
summary (model_1)
model_1$coefficients
which.max(model_1$residuals)
fitted(model_1)[24]
confint(model_1)
Average_status =mean(teengamb$status)
Average_income =mean(teengamb$income)
Average_verbal =mean(teengamb$verbal)
new_df <- data.frame(sex = 1,"status" = Average_status, "income" = Average_income, verbal =Average_verbal )
predict(model_1, new_df, interval = "prediction")
confint(model_1)
Average_status =mean(teengamb$status)
Average_income =mean(teengamb$income)
Average_verbal =mean(teengamb$verbal)
new_df <- data.frame(sex = 1,"status" = Average_status, "income" = Average_income, verbal =Average_verbal )
predict(model_1, new_df, interval = "prediction")
#Select growing season length (days)
F_growing_season_days<-function(min,mode,max){
days<-round(mc2d::rpert(n=1,min=min,mode=mode,max=max),0)
return (days)
}
F_growing_season_days(36, 40,42)
F_growing_season_days(36, 40,42)
F_growing_season_days(36, 40,42)
shiny::runApp('GitHubFiles/SCRM-Project/Trying')
runApp('GitHubFiles/SCRM-Project/Trying')
runApp()
runApp('GitHubFiles/SCRM-Project/Trying')
runApp('GitHubFiles/SCRM-Project/Trying')
runApp('GitHubFiles/SCRM-Project/Trying')
runApp('GitHubFiles/SCRM-Project/Trying')
runApp('GitHubFiles/SCRM-Project/Trying')
runApp('GitHubFiles/SCRM-Project/Trying')
runApp('GitHubFiles/SCRM-Project/Trying')
runApp()
runApp('GitHubFiles/SCRM-Project/Trying')
runApp('GitHubFiles/SCRM-Project/Trying')
eco
model2<-lm(formula = home~ usborn + income + pop, data = eco)
library(faraway)
eco
model2<-lm(formula = home~ usborn + income + pop, data = eco)
plot(model2)
which.max(model2$residuals)
model1$residuals[12]
which.min(model2$residuals)
which.min(model2$residuals)
model2$residuals[29]
model2$residuals[12]
which.max(hatvalues(model2))
hatvalues(model1)[5]
hatvalues(model2)[5]
sort(cooks.distance(model2))
swiss
model3<- lm(Fertility~Agriculture+Examination+Education+Catholic+Infant.Mortality)
model3<- lm(Fertility~Agriculture+Examination+Education+Catholic+Infant.Mortality, data = swiss)
model3_standardr<-rstandard(model3)
model3_standardr<-rstandard(model3)
plot(model3_standardr, model3$residuals,
xlab="Standardized Residuals",
ylab="Least Square Residuals",
abline(0, 0)
model3_standardr<-rstandard(model3)
plot(model3_standardr, model3$residuals
xlab="Standardized Residuals",
ylab="Least Square Residuals",
abline(0, 0) )
model3_standardr<-rstandard(model3)
plot(model3_standardr, model3$residuals,
xlab="Standardized Residuals",
ylab="Least Square Residuals",
abline(0, 0))
rstudent(model3)
qt(0.95)
qt(0.95, swiss)
qt(0.05, df= df.residual(model3), lower = Flase)
qt(0.05, df= df.residual(model3), lower = F)
#critical
which(abs(rstudent(model3))>1.68)
qt(0.05/2*nobs(model3), df= df.residual(model3), lower = F)
qt(0.05/(2*nobs(model3)), df= df.residual(model3), lower = F)
#critical
which(abs(rstudent(model3))>3.522795)
shiny::runApp('GitHubFiles/SCRM-Project/Trying')
for (i in 1:9){
qqnorm(rgeom(50))
}
par(mfrow = c(3,3), pty= "a")
par(mfrow = c(3,3), pty= "s")
for (i in 1:9){
qqnorm(rgeom(50, prob = 0.4))
}
PP_100<-read.csv("Data_Tomato_Outputs/pp_hs_1_100.csv")
PP2_100<-read.csv("Data_Tomato_Outputs/pp_hs_2_100.csv")
PP6_100<-read.csv("Data_Tomato_Outputs/pp_hs_3_100.csv")
PP60_100<-read.csv("Data_Tomato_Outputs/pp_hs_4_100.csv")
PP20M_100<-read.csv("Data_Tomato_Outputs/pp_hs_5_100.csv")
PP60M_100<-read.csv("Data_Tomato_Outputs/pp_hs_6_100.csv")
TR20T_100<-Get_PP_df(PP2= PP2_100)
TR20T_100$Sampling<-"20 Tomatoes"
TR2T_100<-Get_PP_df(PP2= PP_100)
TR2T_100$Sampling<-"2 Tomatoes"
TR6T_100<-Get_PP_df(PP= PP6_100)
TR6T_100$Sampling<-"6 Tomatoes"
TR60T_100<-Get_PP_df(PP= PP60_100)
TR60T_100$Sampling<-"60 Tomatoes"
TR20TM_100<-Get_PP_df(PP= PP20M_100)
TR20TM_100$Sampling<-"20 Tomato Mash"
TR60TM_100<-Get_PP_df(PP= PP60M_100)
TR60TM_100$Sampling<-"60 Tomato Mash"
TR_All_100<-rbind(TR2T_100,TR6T_100,TR20T_100,TR60T_100,TR20TM_100,TR60TM_100)
TR_All_100$Sampling<-factor(TR_All_100$Sampling, levels=c("2 Tomatoes", "6 Tomatoes", "20 Tomatoes" , "60 Tomatoes", "20 Tomato Mash", "60 Tomato Mash"))
TR_All_100$ContSpread<-"10% Cluster"
TR_All_100%>%
filter(Sampling == "2 Tomatoes" | Sampling == "20 Tomatoes") %>%
ggplot()+
geom_col(aes(x = X6, y = total,fill = class),position = position_identity(), alpha = 0.9)+
geom_point(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.5, size = 1)+
geom_smooth(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.1,span = 0.9, size = 0.7, se=F )+
scale_y_continuous(labels = scales::comma,sec.axis = sec_axis(~./10000000, name = 'Risk Mitigation Power'))+
xlab("Day when contamination event happened")+
ylab("Tota Adulterant Cells (TAC) @ sampling point")+
facet_grid(Sampling~Pick, scales = "free_x")+
scale_fill_discrete("Contamination Outcome")
library(tidyverse)
library(scales)
library(forcats)
PP_100<-read.csv("Data_Tomato_Outputs/pp_hs_1_100.csv")
PP2_100<-read.csv("Data_Tomato_Outputs/pp_hs_2_100.csv")
PP6_100<-read.csv("Data_Tomato_Outputs/pp_hs_3_100.csv")
PP60_100<-read.csv("Data_Tomato_Outputs/pp_hs_4_100.csv")
PP20M_100<-read.csv("Data_Tomato_Outputs/pp_hs_5_100.csv")
PP60M_100<-read.csv("Data_Tomato_Outputs/pp_hs_6_100.csv")
TR20T_100<-Get_PP_df(PP2= PP2_100)
TR20T_100$Sampling<-"20 Tomatoes"
TR2T_100<-Get_PP_df(PP2= PP_100)
TR2T_100$Sampling<-"2 Tomatoes"
TR6T_100<-Get_PP_df(PP= PP6_100)
TR6T_100$Sampling<-"6 Tomatoes"
TR60T_100<-Get_PP_df(PP= PP60_100)
TR60T_100$Sampling<-"60 Tomatoes"
TR20TM_100<-Get_PP_df(PP= PP20M_100)
TR20TM_100$Sampling<-"20 Tomato Mash"
TR60TM_100<-Get_PP_df(PP= PP60M_100)
TR60TM_100$Sampling<-"60 Tomato Mash"
TR_All_100<-rbind(TR2T_100,TR6T_100,TR20T_100,TR60T_100,TR20TM_100,TR60TM_100)
TR_All_100$Sampling<-factor(TR_All_100$Sampling, levels=c("2 Tomatoes", "6 Tomatoes", "20 Tomatoes" , "60 Tomatoes", "20 Tomato Mash", "60 Tomato Mash"))
TR_All_100$ContSpread<-"10% Cluster"
TR_All_100%>%
filter(Sampling == "2 Tomatoes" | Sampling == "20 Tomatoes") %>%
ggplot()+
geom_col(aes(x = X6, y = total,fill = class),position = position_identity(), alpha = 0.9)+
geom_point(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.5, size = 1)+
geom_smooth(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.1,span = 0.9, size = 0.7, se=F )+
scale_y_continuous(labels = scales::comma,sec.axis = sec_axis(~./10000000, name = 'Risk Mitigation Power'))+
xlab("Day when contamination event happened")+
ylab("Tota Adulterant Cells (TAC) @ sampling point")+
facet_grid(Sampling~Pick, scales = "free_x")+
scale_fill_discrete("Contamination Outcome")
PP_100<-read.csv("Data_Tomato_Outputs/pp_hs_1_100.csv")
PP2_100<-read.csv("Data_Tomato_Outputs/pp_hs_2_100.csv")
PP6_100<-read.csv("Data_Tomato_Outputs/pp_hs_3_100.csv")
PP60_100<-read.csv("Data_Tomato_Outputs/pp_hs_4_100.csv")
PP20M_100<-read.csv("Data_Tomato_Outputs/pp_hs_5_100.csv")
PP60M_100<-read.csv("Data_Tomato_Outputs/pp_hs_6_100.csv")
TR20T_100<-Get_PP_df(PP2= PP2_100)
TR20T_100$Sampling<-"20 Tomatoes"
TR2T_100<-Get_PP_df(PP2= PP_100)
TR2T_100$Sampling<-"2 Tomatoes"
TR6T_100<-Get_PP_df(PP= PP6_100)
TR6T_100$Sampling<-"6 Tomatoes"
TR60T_100<-Get_PP_df(PP= PP60_100)
TR60T_100$Sampling<-"60 Tomatoes"
TR20TM_100<-Get_PP_df(PP= PP20M_100)
TR20TM_100$Sampling<-"20 Tomato Mash"
TR60TM_100<-Get_PP_df(PP= PP60M_100)
TR60TM_100$Sampling<-"60 Tomato Mash"
TR_All_100<-rbind(TR2T_100,TR6T_100,TR20T_100,TR60T_100,TR20TM_100,TR60TM_100)
TR_All_100$Sampling<-factor(TR_All_100$Sampling, levels=c("2 Tomatoes", "6 Tomatoes", "20 Tomatoes" , "60 Tomatoes", "20 Tomato Mash", "60 Tomato Mash"))
TR_All_100$ContSpread<-"10% Cluster"
TR_All_100%>%
filter(Sampling == "2 Tomatoes" | Sampling == "20 Tomatoes") %>%
ggplot()+
geom_col(aes(x = X6, y = total,fill = class),position = position_identity(), alpha = 0.9)+
geom_point(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.5, size = 1)+
geom_smooth(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.1,span = 0.9, size = 0.7, se=F )+
scale_y_continuous(labels = scales::comma,sec.axis = sec_axis(~./10000000, name = 'Risk Mitigation Power'))+
xlab("Day when contamination event happened")+
ylab("Tota Adulterant Cells (TAC) @ sampling point")+
facet_grid(Sampling~Pick, scales = "free_x")+
scale_fill_discrete("Contamination Outcome")
PP_100<-read.csv("Data_Tomato_Outputs/pp_hs_1_100.csv")
setwd("~/GitHubFiles/CPS-Farm-to-Facility_L_T/Model")
PP_100<-read.csv("Data_Tomato_Outputs/pp_hs_1_100.csv")
PP2_100<-read.csv("Data_Tomato_Outputs/pp_hs_2_100.csv")
PP6_100<-read.csv("Data_Tomato_Outputs/pp_hs_3_100.csv")
PP60_100<-read.csv("Data_Tomato_Outputs/pp_hs_4_100.csv")
PP20M_100<-read.csv("Data_Tomato_Outputs/pp_hs_5_100.csv")
PP60M_100<-read.csv("Data_Tomato_Outputs/pp_hs_6_100.csv")
TR20T_100<-Get_PP_df(PP2= PP2_100)
TR20T_100$Sampling<-"20 Tomatoes"
TR2T_100<-Get_PP_df(PP2= PP_100)
TR2T_100$Sampling<-"2 Tomatoes"
TR6T_100<-Get_PP_df(PP= PP6_100)
TR6T_100$Sampling<-"6 Tomatoes"
TR60T_100<-Get_PP_df(PP= PP60_100)
TR60T_100$Sampling<-"60 Tomatoes"
TR20TM_100<-Get_PP_df(PP= PP20M_100)
TR20TM_100$Sampling<-"20 Tomato Mash"
TR60TM_100<-Get_PP_df(PP= PP60M_100)
TR60TM_100$Sampling<-"60 Tomato Mash"
TR_All_100<-rbind(TR2T_100,TR6T_100,TR20T_100,TR60T_100,TR20TM_100,TR60TM_100)
TR20T_100<-Get_PP_df(PP2= PP2_100)
Get_PP_df<-function(PP2){
R1<-PP2 %>%
filter(X1 == "No") %>%
group_by(X6) %>%
summarize(total =sum(X0)) %>%
mutate(class= "Total Rejected")
T1<-PP2 %>%
filter(X1 == "No") %>%
group_by(X6) %>%
summarize(total =sum(CFU_Bef_Pick1PHS),Prot_Rate = sum(X0)/sum(CFU_Bef_Pick1PHS)) %>%
mutate(class= "Total Available")
TR1<-T1%>%
bind_rows(R1) %>%
mutate(Pick = "PH sampling Pick 1")
R2<-PP2 %>%
filter(X3 == "No") %>%
group_by(X6) %>%
summarize(total =sum(X2))%>%
mutate(class= "Total Rejected")
T2<-PP2 %>%
filter(X3 == "No") %>%
group_by(X6) %>%
summarize(total =sum(CFU_Bef_Pick2PHS),Prot_Rate = sum(X2)/sum(CFU_Bef_Pick2PHS)) %>%
mutate(class= "Total Available")
TR2<-T2%>%
bind_rows(R2) %>%
mutate(Pick = "PH sampling Pick 2")
R3<-PP2 %>%
filter(X5 == "No") %>%
group_by(X6) %>%
summarize(total =sum(X4))%>%
mutate(class= "Total Rejected")
T3<-PP2 %>%
filter(X5 == "No") %>%
group_by(X6) %>%
summarize(total =sum(CFU_Bef_Pick3PHS),Prot_Rate = sum(X4)/sum(CFU_Bef_Pick3PHS)) %>%
mutate(class= "Total Available")
TR3<-T3%>%
bind_rows(R3) %>%
mutate(Pick = "PH sampling Pick 3")
TR_Tog<-rbind(TR1,TR2,TR3)
return (TR_Tog)
}
PP_100<-read.csv("Data_Tomato_Outputs/pp_hs_1_100.csv")
PP2_100<-read.csv("Data_Tomato_Outputs/pp_hs_2_100.csv")
PP6_100<-read.csv("Data_Tomato_Outputs/pp_hs_3_100.csv")
PP60_100<-read.csv("Data_Tomato_Outputs/pp_hs_4_100.csv")
PP20M_100<-read.csv("Data_Tomato_Outputs/pp_hs_5_100.csv")
PP60M_100<-read.csv("Data_Tomato_Outputs/pp_hs_6_100.csv")
TR20T_100<-Get_PP_df(PP2= PP2_100)
TR20T_100$Sampling<-"20 Tomatoes"
TR2T_100<-Get_PP_df(PP2= PP_100)
TR2T_100$Sampling<-"2 Tomatoes"
TR6T_100<-Get_PP_df(PP= PP6_100)
TR6T_100$Sampling<-"6 Tomatoes"
TR60T_100<-Get_PP_df(PP= PP60_100)
TR60T_100$Sampling<-"60 Tomatoes"
TR20TM_100<-Get_PP_df(PP= PP20M_100)
TR20TM_100$Sampling<-"20 Tomato Mash"
TR60TM_100<-Get_PP_df(PP= PP60M_100)
TR60TM_100$Sampling<-"60 Tomato Mash"
TR_All_100<-rbind(TR2T_100,TR6T_100,TR20T_100,TR60T_100,TR20TM_100,TR60TM_100)
TR_All_100$Sampling<-factor(TR_All_100$Sampling, levels=c("2 Tomatoes", "6 Tomatoes", "20 Tomatoes" , "60 Tomatoes", "20 Tomato Mash", "60 Tomato Mash"))
TR_All_100$ContSpread<-"10% Cluster"
TR_All_100%>%
filter(Sampling == "2 Tomatoes" | Sampling == "20 Tomatoes") %>%
ggplot()+
geom_col(aes(x = X6, y = total,fill = class),position = position_identity(), alpha = 0.9)+
geom_point(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.5, size = 1)+
geom_smooth(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.1,span = 0.9, size = 0.7, se=F )+
scale_y_continuous(labels = scales::comma,sec.axis = sec_axis(~./10000000, name = 'Risk Mitigation Power'))+
xlab("Day when contamination event happened")+
ylab("Tota Adulterant Cells (TAC) @ sampling point")+
facet_grid(Sampling~Pick, scales = "free_x")+
scale_fill_discrete("Contamination Outcome")
TR_All_100%>%
#filter(Sampling == "2 Tomatoes" | Sampling == "20 Tomatoes") %>%
ggplot()+
geom_col(aes(x = X6, y = total,fill = class),position = position_identity(), alpha = 0.9)+
geom_point(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.5, size = 1)+
geom_smooth(aes(x = X6, y =Prot_Rate*10000000), alpha = 0.1,span = 0.9, size = 0.7, se=F )+
scale_y_continuous(labels = scales::comma,sec.axis = sec_axis(~./10000000, name = 'Risk Mitigation Power'))+
xlab("Day when contamination event happened")+
ylab("Tota Adulterant Cells (TAC) @ sampling point")+
facet_grid(Sampling~Pick, scales = "free_x")+
scale_fill_discrete("Contamination Outcome")
